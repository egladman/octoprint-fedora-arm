#!/usr/bin/env bash

set -o errexit -o pipefail

# Initalize octoprint container and systemd services on first boot

OCTOPRINT_VERSION="${OCTOPRINT_VERSION:-1.9.1}"
OCTOPRINT_USER="${OCTOPRINT_USER:-octo}"
OCTOPRINT_HOME="${OCTOPRINT_HOME:-/home/${OCTOPRINT_USER}/octoprint}"
OCTOPRINT_PORT="${OCTOPRINT_PORT:-80}"
CONTAINER_REGISTRY="${CONTAINER_REGISTRY:-docker.io/octoprint/}"

# Returns podman create args. Finds all peripherals (i.e, webcam,
# serialport) used by Octoprint 
podman::build_device_args() {
    # Usage: util::build_device_args
    for d in /dev/ttyACM* /dev/video*; do    
	if [[ ! -c "$d"  ]]; then
	    continue
	fi
	set -- "$@" --device "$d"
    done

    printf '%s\n' "$@"
}

init() {
    if [[ -f "${OCTOPRINT_HOME}/.lockfile" ]]; then
	exit 0
    fi

    if [[ ! -d "${OCTOPRINT_HOME}/volume" ]]; then
	mkdir -p "${OCTOPRINT_HOME}/volume"
    fi
}

main() {
    local pod_container pod_name
    pod_container="service"
    pod_name="octoprint"

    podman pod exists "$pod_name" && {
	podman pod stop "$pod_name" || :
	podman pod rm "$pod_name"
    } 
    
    podman pod create --name="$pod_name"

    declare -a podman_opts
    podman_opts=(
	--pod="$pod_name"
	--name="$pod_container"
	--volume="${OCTOPRINT_HOME}/volume:/octoprint"
	--env ENABLE_MJPG_STREAMER=true
	--publish ${OCTOPRINT_PORT}:80
	$(podman::build_device_args)
    )

    local repository
    repository="${CONTAINER_REGISTRY}/octoprint:${OCTOPRINT_VERSION}"

    podman create "${podman_opts}" "$repository"

    local systemd_dir
    systemd_dir="/usr/lib/systemd/system"

    pushd "$systemd_dir"
    podman generate systemd --new --files --name "$pod_name"
    popd

    systemctl daemon-reload

    # Create lock
    >"${OCTOPRINT_HOME}/.lockfile"
}

init
main "$@"
