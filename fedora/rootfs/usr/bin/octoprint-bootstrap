#!/usr/bin/env bash

set -o errexit -o pipefail

# Dynamically creates pod-octoprint.service

OCTOPRINT_AUTO_UPDATE=${OCTOPRINT_AUTO_UPDATE:-1} # `0` disables auto-updating
OCTOPRINT_VERSION="${OCTOPRINT_VERSION:-latest}"  # `latest` stable, `edge`, `canary`, `bleeding`
OCTOPRINT_DATA="${OCTOPRINT_DATA:-/var/lib/octoprint}"
OCTOPRINT_PORT="${OCTOPRINT_PORT:-80}"
OCTOPRINT_REGISTRY="${OCTOPRINT_REGISTRY:-docker.io/octoprint/}"

# Finds all peripherals (i.e, webcam, serialport) used by Octoprint 
found_devices() {
    for d in /dev/ttyACM* /dev/ttyUSB* /dev/video*; do    
	if [[ ! -c "$d"  ]]; then
	    continue
	fi
	set -- "$@" "$d"
    done
    printf '%s\n' "$@"
}

init() {
    for p in "$OCTOPRINT_DATA"; do
	if [[ ! -d "$p" ]]; then
	    printf '%s\n' "Creating directory: $p"
	    mkdir -m 777 -p "$p"
	fi
    done

    # FIXME: This is a workaround. The policy.json doesn't exist and i'm not sure why.
    if [[ ! -f /etc/containers/policy.json ]]; then
	printf '%s\n' "Generating container policy. Path does not exist: /etc/containers/policy.json"
	cat << EOF > /etc/containers/policy.json
{
    "default": [{"type": "insecureAcceptAnything"}]
}
EOF
    fi
}

main() {
    local pod_container pod_name
    pod_container="web"
    pod_name="octoprint"

    declare -a podman_pod_opts
    podman_pod_opts=(
	--name="$pod_name"
	--publish "${OCTOPRINT_PORT}:80"
	--replace
    )

    if [[ $OCTOPRINT_AUTO_UPDATE -eq 1 ]]; then
	printf '%s\n' "Enabling auto-updating"
	podman_pod_opts+=(--label io.containers.autoupdate=registry)
    fi

    printf '%s\n' "Creating pod: $pod_name"
    podman pod create "${podman_pod_opts[@]}"

    declare -a podman_create_opts
    podman_create_opts=(
	--pod="$pod_name"
	--name="$pod_container"
	--volume="${OCTOPRINT_DATA}:/octoprint"
	--env ENABLE_MJPG_STREAMER=true
	--pull=never
	--replace
    )

    for d in $(found_devices); do
	podman_create_opts+=(--device="$d")
    done

    local repository
    repository="${OCTOPRINT_REGISTRY}octoprint:${OCTOPRINT_VERSION}"

    printf '%s\n' "Creating container: $pod_container"
    podman create "${podman_create_opts[@]}" "$repository"

    local systemd_dir
    systemd_dir="/usr/lib/systemd/system"

    printf '%s\n' "Generating podman systemd services in directory: $systemd_dir"
    pushd "$systemd_dir"
    podman generate systemd \
	   --restart-policy=always \
	   --after="network-online.target default.target" \
	   --new \
	   --files \
	   --name \
	   "$pod_name"
    popd

    systemctl daemon-reload
    systemctl --now enable pod-octoprint.service
    
    printf '%s\n' "Goodbye."
}

init
main "$@"
