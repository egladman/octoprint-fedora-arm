#!/usr/bin/env bash

set -o errexit -o pipefail

# Dynamically generates systemd service files for octoprint running via podman

# This approach was taken instead of using podman's existing quadlet systemd-generator
# because me traverse /dev looking for relavent character devices
# https://www.redhat.com/sysadmin/quadlet-podman

OCTOPRINT_AUTO_UPDATE=${OCTOPRINT_AUTO_UPDATE:-1} # Set to `0` to disable auto updating
OCTOPRINT_VERSION="${OCTOPRINT_VERSION:-latest}"
OCTOPRINT_DATA="${OCTOPRINT_DATA:-/var/lib/octoprint}"
OCTOPRINT_PORT="${OCTOPRINT_PORT:-80}"
CONTAINER_REGISTRY="${CONTAINER_REGISTRY:-docker.io/octoprint/}"
SYSTEMD_SERVICE_HOME="/run/systemd/generator" # By this point the rootfs is readonly so we must write to /run

# Returns podman create args. Finds all peripherals (i.e, webcam,
# serialport) used by Octoprint 
podman::build_device_args() {
    # Usage: util::build_device_args
    for d in /dev/ttyACM* /dev/ttyUSB* /dev/video*; do    
	if [[ ! -c "$d"  ]]; then
	    printf '%s\n' "Not a character device. Skipping: $d"
	    continue
	fi
	printf '%s\n' "Found device: $d"
	set -- "$@" --device "$d"
    done

    printf '%s\n' "$@"
}

init() {
    for p in "$OCTOPRINT_DATA" "$SYSTEMD_SERVICE_HOME"; do
	if [[ ! -d "$p" ]]; then
	    printf '%s\n' "Creating directory: $p"
	    mkdir -p "$p"
	fi
    done
}

main() {
    local pod_container pod_name
    pod_container="web"
    pod_name="octoprint"

    podman pod exists "$pod_name" && {
	printf '%s\n' "Deleting stale container"
	podman pod stop "$pod_name" || :
	podman pod rm "$pod_name"
    } 

    declare -a podman_pod_opts
    podman_pod_opts=(
	--name="$pod_name"
	--publish "${OCTOPRINT_PORT}:80"
    )

    if [[ $OCTOPRINT_AUTO_UPDATE -eq 1 ]]; then
	printf '%s\n' "Configuring auto-update"
	podman_pod_opts+=(--label io.containers.autoupdate=registry)
    fi
 
    printf '%s\n' "Creating pod: $pod_name"
    podman pod create "${podman_pod_opts[@]}"

    declare -a podman_create_opts
    podman_create_opts=(
	--pod="$pod_name"
	--name="$pod_container"
	--volume="${OCTOPRINT_DATA}:/octoprint"
	--env ENABLE_MJPG_STREAMER=true
	$(podman::build_device_args)
    )
    
    local repository
    repository="${CONTAINER_REGISTRY}octoprint:${OCTOPRINT_VERSION}"

    printf '%s\n' "Creating container: $pod_container"
    podman create "${podman_create_opts[@]}" "$repository"

    printf '%s\n' "Generating podman systemd services in directory: $SYSTEMD_SERVICE_HOME"
    pushd "$SYSTEMD_SERVICE_HOME"
    podman generate systemd \
	   --restart-policy=always \
	   --after="network-online.target default.target" \
	   --new \
	   --files \
	   --name \
	   "$pod_name"
    popd

    printf '%s\n' "Goodbye."
}

init
main "$@"
